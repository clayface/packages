--- a/Makefile.am
+++ b/Makefile.am
@@ -2118,6 +2118,13 @@
 ted_la_LDFLAGS = $(PLUGIN_LDFLAGS)
 endif
 
+if BUILD_PLUGIN_POE
+pkglib_LTLIBRARIES += poe.la
+poe_la_SOURCES = src/poe.c
+poe_la_LDFLAGS = $(PLUGIN_LDFLAGS)
+poe_la_LIBADD = libignorelist.la
+endif
+
 if BUILD_PLUGIN_THERMAL
 pkglib_LTLIBRARIES += thermal.la
 thermal_la_SOURCES = src/thermal.c
--- a/configure.ac
+++ b/configure.ac
@@ -6639,6 +6639,7 @@
 plugin_pcie_errors="no"
 plugin_perl="no"
 plugin_pinba="no"
+plugin_poe="no"
 plugin_processes="no"
 plugin_procevent="no"
 plugin_protocols="no"
@@ -6692,6 +6693,7 @@
   plugin_memory="yes"
   plugin_nfs="yes"
   plugin_numa="yes"
+  plugin_poe="yes"
   plugin_processes="yes"
   plugin_protocols="yes"
   plugin_serial="yes"
@@ -7145,6 +7147,7 @@
 # FIXME: Check for libevent, too.
 AC_PLUGIN([pinba],               [$plugin_pinba],             [Pinba statistics])
 AC_PLUGIN([ping],                [$with_liboping],            [Network latency statistics])
+AC_PLUGIN([poe],                 [$plugin_poe],               [PoE power output])
 AC_PLUGIN([postgresql],          [$with_libpq],               [PostgreSQL database statistics])
 AC_PLUGIN([powerdns],            [yes],                       [PowerDNS statistics])
 AC_PLUGIN([processes],           [$plugin_processes],         [Process statistics])
@@ -7596,6 +7599,7 @@
 AC_MSG_RESULT([    pf  . . . . . . . . . $enable_pf])
 AC_MSG_RESULT([    pinba . . . . . . . . $enable_pinba])
 AC_MSG_RESULT([    ping  . . . . . . . . $enable_ping])
+AC_MSG_RESULT([    poe . . . . . . . . . $enable_poe])
 AC_MSG_RESULT([    postgresql  . . . . . $enable_postgresql])
 AC_MSG_RESULT([    powerdns  . . . . . . $enable_powerdns])
 AC_MSG_RESULT([    processes . . . . . . $enable_processes])
--- a/src/collectd.conf.in
+++ b/src/collectd.conf.in
@@ -190,6 +190,7 @@
 #@BUILD_PLUGIN_PERL_TRUE@LoadPlugin perl
 #@BUILD_PLUGIN_PINBA_TRUE@LoadPlugin pinba
 #@BUILD_PLUGIN_PING_TRUE@LoadPlugin ping
+#@BUILD_PLUGIN_POE_TRUE@LoadPlugin poe
 #@BUILD_PLUGIN_POSTGRESQL_TRUE@LoadPlugin postgresql
 #@BUILD_PLUGIN_POWERDNS_TRUE@LoadPlugin powerdns
 #@BUILD_PLUGIN_PROCESSES_TRUE@LoadPlugin processes
--- /dev/null
+++ b/src/poe.c
@@ -0,0 +1,96 @@
+#include "collectd.h"
+
+#include "plugin.h"
+#include "utils/common/common.h"
+#include "utils/ignorelist/ignorelist.h"
+
+#if !KERNEL_LINUX
+#error "This module is for Linux only."
+#endif
+
+static const char *config_keys[] = {"Device", "IgnoreSelected"};
+
+static const char *const dirname_sysfs = "/sys/class/poe/sys_ports";
+static ignorelist_t *device_list;
+
+static void poe_submit(const char *plugin_instance, value_t value) {
+  value_list_t vl = VALUE_LIST_INIT;
+
+  vl.values = &value;
+  vl.values_len = 1;
+
+  sstrncpy(vl.plugin, "poe", sizeof(vl.plugin));
+  if (plugin_instance != NULL)
+    sstrncpy(vl.plugin_instance, plugin_instance, sizeof(vl.plugin_instance));
+  sstrncpy(vl.type, "power", sizeof(vl.type));
+
+  plugin_dispatch_values(&vl);
+}
+
+static int poe_sysfs_device_read(const char __attribute__((unused)) * dir,
+                                     const char *name,
+                                     void __attribute__((unused)) * user_data) {
+  char filename[PATH_MAX];
+  bool success = false;
+  value_t value;
+
+  if (device_list && ignorelist_match(device_list, name))
+    return -1;
+
+  snprintf(filename, sizeof(filename), "%s/%s/millijoules", dirname_sysfs, name);
+  if (parse_value_file(filename, &value, DS_TYPE_GAUGE) == 0) {
+    value.gauge /= interval_g;
+    poe_submit(name, value);
+    success = true;
+  }
+
+  return success ? 0 : -1;
+}
+
+static int poe_config(const char *key, const char *value) {
+  if (device_list == NULL)
+    device_list = ignorelist_create(1);
+
+  if (strcasecmp(key, "Device") == 0) {
+    if (ignorelist_add(device_list, value)) {
+      ERROR("poe plugin: "
+            "Cannot add value to ignorelist.");
+      return 1;
+    }
+  } else if (strcasecmp(key, "IgnoreSelected") == 0) {
+    ignorelist_set_invert(device_list, 1);
+    if (IS_TRUE(value))
+      ignorelist_set_invert(device_list, 0);
+  } else {
+    return -1;
+  }
+
+  return 0;
+}
+
+static int poe_sysfs_read(void) {
+  return walk_directory(dirname_sysfs, poe_sysfs_device_read, NULL, 0);
+}
+
+static int poe_init(void) {
+  int ret = -1;
+
+  if (access(dirname_sysfs, R_OK | X_OK) == 0) {
+    ret = plugin_register_read("poe", poe_sysfs_read);
+  }
+
+  return ret;
+}
+
+static int poe_shutdown(void) {
+  ignorelist_free(device_list);
+
+  return 0;
+}
+
+void module_register(void) {
+  plugin_register_config("poe", poe_config, config_keys,
+                         STATIC_ARRAY_SIZE(config_keys));
+  plugin_register_init("poe", poe_init);
+  plugin_register_shutdown("poe", poe_shutdown);
+}
